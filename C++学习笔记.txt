#include "stdio.h"

class Student{
public:
	char *name;
	int age;
	float score;
	void say()
	{
		printf("%s的年龄是d%,学习成绩是f%",name,age,score);			
	}
};

namespace Fu{
	FILE fp=NULL;
}

int main()
{
	class Student stu;
	stu.name="fuliguang";
	stu.age=18;
	stu.score=98.0f;
	
	stu.say();
	
	Li::fp;
	fp=fopen("test.txt","r");
		
	using Li::fp;
	fp=fopen("test.txt","r");
	
	using namespace Li;
	fp=fopen("test.txt","r");
	
	return 1;
}


namespace Fu{
	class Student{
	public:
		char *name;
		int age;
		float score;
	public:
		void say(){
			printf("%s的年龄是%d，分数是%f',name,age,score);
		}	
	};
}

int main()
{
	Fu::Student stu;
	stu.name="小明";
	stu.age=15;
	stu.score=98.5;
	stu.say();
	
	return 0;
}

#define SEG_A	(0x01<<0)
#define SEG_B	(0x01<<1)
#define SEG_C	(0x01<<2)
#define SEG_D	(0x01<<3)

#define CH_0	(SEG_A|SE_B|SEG_C|SEG_D|SEG_E|SEG_F)

u8 dis_table[10]={CH_0,0x06,};


u8	dis_temp=0;
u8	dis_data=5;

void main()
{
	//设置各引脚为输出 
	dis_temp = dis_table[dis_data];
	//0011 11111
	if(dis_temp & (0x01<<0))
	{
		SEG_A_PIN = 1;
	}
	else
	{
		SEG_A_PIN = 0;
	}
	
	if(dis_temp & (0x01<<1))	//dis_temp & 0B00000010
	{
		SEG_B_PIN = 1;
	}
	else
	{
		SEG_B_PIN = 0;
	}
	
	if()

	dis_temp = dis_temp | (0x01<<3));//0x08;
	
	dis_temp = dis_temp & (~(0x01<<4));//0xef         0B 1110 1111      0x10 		~0B0001 0000
	
	}
	
	
#include <iostream>

using namespace std;
class Student{
private:
	char *m_name;
	int m_age;
	float m_score;
public:
	Student();
	Student(char *name,int age,float score);
	setname(char *name);
	setage(int age);
	setscore(float score);
	void show();
}

Student::Student(char *name,int age,float score)
{
	m_age = name;
	m_age = age;
	m_score = score;
}

Student::show()
{
	cout<<m_name<<"的年龄是:"<<m_age<<",分数是:"<<m_score<<endl;
}

int main()
{	
	Student stu("李四",32,100);
	stu.show();
	Student *pStu= new Student("李华",16,96);
	pStu->show();
	return 0;
}

Student::Student()
{
	m_name=NULL;
	m_age=0;
	m_score=0;
}

Student::Student(char* name,int age,float score)
{
	m_name=name;
	m_age=age;
	m_score=score;
}

Student::setname(char *name)
{
	m_name=name;
}

Student::setage(int age)
{
	m_age=age;
}

Student::setscore(float score)
{
	m_score=score;
}

void show()
{
	if(m_name==NULL || age<=0)
	{
		cout<<"成员变量还未初始化"<<endl;
	}
	else
	{
		cout<<m_name<<"的年龄是:"<<m_age<<",分数是:"<<m_score<<endl;
	}
}

int  main()
{
	Student stu("小明",15,92.5f);
	stu.show();
	
	Student *pStu= new Student();
	pStu->show();
	pStu->setname("小红");
	pStu->setage(14);
	pStu->setscore(98.0f);
	return 0;
}

//定义没有参数的对象时，括号都可以省略
Student stu();//在栈上定义，如果没有参数，括号可省略，即Student stu; 相当于调用了默认构造函数(没有参数)。
Student *pStu=new Student();//在堆上定义对象，如果没有参数，括号也可以省略，即Student *pStu=new Student; 相当于调用了默认构造函数(没有参数)

成员变量前有 const ，则只能通过构造函数的初始化列表来 赋初值，比如数组的元素个数。

对象数组的创建与初始化
class CTest{
public :
	CTest(int n)//构造函数(1)
	{
	
	}
	CTest(int n,int m) //构造函数(2)
	{
	
	}
	CTest()//构造函数(3)
	{
	
	}
}

int main()
{
//三个元素分别用构造函数(1)、(2)、(3) 初始化
	CTest array1[3]={1,CTest(1,2)};
//三个元素分别用构造函数(2)、(2)、(1)初始化
	CTest array2[3]={CTest(1,2),CTest(2,3),1};
//两个元素指向的对象分别用构造函数(1)、(2)初始化，而这个指针数组中第三个对象指针没赋值，不知道指向哪里
	CTest *pArray3[3]={new CTest(1,2),new CTest(2,3)};	//只生成了2个对象，因为只有2个 new
	return 0;
}

int main()
{
	CTest array1[3]={1,CTest(1,2)};
	CTest array2[3]={};
	CTest *pArray3[3]={new CTest(1),new CTest(1,2)};
}



startfeed=3 开机默认
startfeed==2时，关闭6路PWM

Engine(float displacement = 2.0); 这个是属于无参构造函数吗？

//轮毂类
class Tyre{
public:
	Tyre(int radus,int width);
	void show() const;							//后面加的const什么意思？
private:
	int m_radus;
	int m_width;
}

Tyre::Tyre(int radus,int width)：m_radus(radus),m_width(width){
}

void Tyre::show() const{
	cout<<"轮毂半径:"<<this->m_radus<<"寸"<<endl;
	cout<<"轮毂宽度:"<<this->m_width<<"mm"<<endl;
}

//引擎类
class Engine{
public:
	Engine(float displacement=2.0);
	void show()const;					
private:
	float m_displacement;
}

Engine::Engine(float displacement):m_displacement(displacement){

}

void Engine::show()const{
	cout<<"排量:"<<this->m_displacement<<"L"<<endl;
}

//汽车类
class Car{
public:
	Car(int price,int radus,int width);
	void show()const;
private:
	int m_price;
	Tyre m_tyre;
	Engine m_engine;
}

Car::Car(int price,int radus, int width):m_price(price),m_tyre(radus,width){
	
}

void Car::show()const{
	cout<<"价格："<<this->m_price<<" $"<<endl;
	this->m_tyre.show();
	this->m_engine.show();
}

int main()
{
	Car car(200000,19,245);
	car.show();
	
	return 0;
}

class Student{
public:
	Student(char *name,int age,float score);
	void show();
public:
	static int getTotal();
	static float getPoints();
private:
	int m_total;
	float m_points;
private:
	char *m_name;
	int m_age;
	int m_score;
}

int Student::m_total=0;
float Student::m_points=0.0f;

Student::Student(char *name,int age,int score):m_name(name),m_age(age),m_score(score)
{
	m_total++;
	m_points+=score;
}

void Student::show()
{
	cout<<m_name<<"的年龄是"<<m_age<<",成绩是:"<<m_score<<endl;
}

int Student::getTotal()
{
	return m_total;
}

float Student::getPoints()
{
	return m_points;
}

int main()
{
	Student stu1("小李",20,99.0f);
	stu1.show();

	Student stu2("小黄",50,90.0f);
	stu2.show();
	
	int total=Student::getTotal();
	float points=Student::getPoints();
	
	cout<<"当前共有"<<total<<"名学生，总成绩是"<<points<<endl;
	
	return 0;
}


void Key_Scan(void)
{
	key_last_status=key_pre_status;
	key_pre_status=key_now_status;
	key_now_status=0xffff;
	
	H1=0;
	H2=1;
	H3=1;
	H4=1;	
	asm("NOP");
	if(0==L1)
	{
		key_now_status&=~(1<<0);
	}
	if(0==L2)
	{
		key_now_status&=~(1<<1);
	}
	if(0==L3)
	{
		key_now_status&=~(1<<2);
	}
	if(0==L4)
	{
		key_now_status&=~(1<<3);
	}
	
	H1=1;
	H2=0;
	H3=1;
	H4=1;	
	asm("NOP");
	if(0==L1)
	{
		key_now_status&=~(1<<4);
	}
	if(0==L2)
	{
		key_now_status&=~(1<<5);
	}
	if(0==L3)
	{
		key_now_status&=~(1<<6);
	}
	if(0==L4)
	{
		key_now_status&=~(1<<7);
	}	
	
	H1=1;
	H2=1;
	H3=0;
	H4=1;	
	asm("NOP");
	if(0==L1)
	{
		key_now_status&=~(1<<8);
	}
	if(0==L2)
	{
		key_now_status&=~(1<<9);
	}
	if(0==L3)
	{
		key_now_status&=~(1<<10);
	}
	if(0==L4)
	{
		key_now_status&=~(1<<11);
	}
	
	H1=1;
	H2=1;
	H3=1;
	H4=0;	
	asm("NOP");
	if(0==L1)
	{
		key_now_status&=~(1<<12);
	}
	if(0==L2)
	{
		key_now_status&=~(1<<13);
	}
	if(0==L3)
	{
		key_now_status&=~(1<<14);
	}
	if(0==L4)
	{
		key_now_status&=~(1<<15);
	}
	
	key_falling=(key_last_status)&(~key_pre_status)&(~key_now_status);  //(key_pre_status)&(~key_now_status); //
	key_falling&=0xffff;        
	key_rising=(~key_last_status)&(key_pre_status)&(key_now_status);       //(~key_pre_status)&key_now_status;     // 
	key_rising&=0xffff;
}


#include <iostream>
using namespace std;
void swap1(int a,int b);
void swap2(int *p1,int *p2);
void swap3(int &r1,int &r2);

int main()
{
	int num1,num2;

	cout<<"input two integers:"<<endl;
	cin>>num1>>num2;
	swap1(num1,num2);
	cout<<num1<<","<<num2<<endl;
	
	cout<<"input two integers:";
	cin>>num1<<num2;
	swap2(&num1,&num2);
	cout<<num1<<","<<num2<<endl;
	
	cout<<"input two integers:";
	cin>>num1<<num2;
	swap3(num1,num2);
	cout<<num1<<","<<num2<<endl;
	
}

void swap1(int a ,int b)
{
	int temp;
	temp=a;
	a=b;
	b=temp;
}

void swap2(int *p1,int *p2)
{
	int temp;
	temp=*p1;
	*p1=*p2;
	*p2=temp;
}

void swap3(int &r1,int &r2)
{
	int temp;
	temp=r1;
	r1=r2;
	r2=temp;
}







































